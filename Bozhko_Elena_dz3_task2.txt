drop table if exists users;
create table users (
	id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	firstname varchar(50),
	lastname varchar(50),
	email varchar(100) unique,
	password_hash varchar(100),
	phone BIGINT unsigned unique,
	
	index users_firstname_lastname_idx(lastname, firstname)
	
);

drop table if exists profiles;
create table profiles (
	user_id BIGINT UNSIGNED not NULL UNIQUE,
	gender CHAR(1),
	birtday DATE,
	photo_id BIGINT UNSIGNED NOT NULL,
	created_at datetime default now(),
	hometown VARCHAR(100)
);


alter table profiles add constraint fk_users_id
foreign key (user_id) references users(id)
on update cascade
on delete restrict;

drop table if exists messages;
create table messages (
	id SERIAL,
	from_user_id BIGINT UNSIGNED NOT NULL,
	to_user_id BIGINT UNSIGNED NOT NULL,
	body TEXT,
	created_at datetime default now(),

	foreign key (from_user_id) references users(id),
	foreign key (to_user_id) references users(id)
);

drop table if exists friend_requests;
create table friend_requests(
	initiator_user_id BIGINT UNSIGNED NOT NULL,
	target_user_id BIGINT UNSIGNED NOT NULL,
	status enum('requested', 'approved', 'declined', 'unfriended'),
	requested_at DATETIME DEFAULT NOW(),
	updated_at datetime on update current_timestamp,

	primary key (initiator_user_id, target_user_id),
	foreign key (initiator_user_id) references users(id),
	foreign key (target_user_id) references users(id)
);


drop table if exists communities;
CREATE TABLE communities (
	id SERIAL,
	name VARCHAR(100),
	admin_user_id BIGINT UNSIGNED NOT NULL,
	
	index communities_name_idx(name),
	foreign key (admin_user_id) references users(id)
);

DROP TABLE IF EXISTS users_communities;
CREATE TABLE users_communities (
	user_id BIGINT UNSIGNED NOT NULL,
	community_id BIGINT UNSIGNED NOT NULL,
	
	primary key (user_id, community_id),
	foreign key (user_id) references users(id),
	foreign key (community_id) references communities(id)
);

DROP TABLE IF EXISTS media_types;
CREATE TABLE media_types (
	id SERIAL,
	name varchar(50),
	created_at datetime default now(),
	updated_at datetime on update current_timestamp
);

DROP TABLE IF EXISTS media;
CREATE TABLE media (
	id serial,
	media_type_id BIGINT UNSIGNED NOT NULL,
	user_id BIGINT UNSIGNED NOT NULL,
	body text,
	filename varchar(255),
	size int,
	metadata JSON,
	created_at datetime default now(),
	updated_at datetime on update current_timestamp,
	
	foreign key (user_id) references users(id),
	foreign key (media_type_id) references media_types(id)
);

DROP TABLE IF EXISTS likes;
CREATE TABLE likes (
	id SERIAL,
	user_id BIGINT UNSIGNED NOT NULL,
	media_id BIGINT UNSIGNED NOT NULL,
	created_at datetime default now()
);


DROP TABLE IF EXISTS photo_albums;
CREATE TABLE photo_albums (
	id SERIAL,
	name varchar(250) DEFAULT NULL,
	user_id BIGINT UNSIGNED NOT NULL,
	
	foreign key (user_id) references users(id),
	primary key (id)
);

DROP TABLE IF EXISTS photos;
CREATE TABLE photos (
	id SERIAL,
	album_id BIGINT UNSIGNED NOT NULL,
	media_id BIGINT UNSIGNED NOT NULL,

	foreign key (media_id) references media(id),
	foreign key (album_id) references photo_albums(id)
);

DROP TABLE IF EXISTS musik_albums;
CREATE TABLE musik_albums (
	id SERIAL,
	name varchar(1550),
	user_id BIGINT UNSIGNED NOT NULL,
	
	foreign key (user_id) references users(id),
	primary key (id)
);

DROP TABLE IF EXISTS musiks;
create table musiks (
	id SERIAL,
	musik_album_id BIGINT UNSIGNED NOT NULL,
	user_id BIGINT UNSIGNED NOT NULL,
	filename varchar(255),
	size int,
	metadata JSON,
	created_at datetime default now(),
	updated_at datetime on update current_timestamp,
	
	foreign key (musik_album_id) references musik_albums(id),
	foreign key (user_id) references users(id)
);

DROP TABLE IF EXISTS video_types;
CREATE TABLE video_types (
	id SERIAL,
	name varchar(16300),
	created_at datetime default now(),
	updated_at datetime on update current_timestamp
);

DROP TABLE IF EXISTS video;
CREATE TABLE video(
	id SERIAL,
	video_type_id BIGINT UNSIGNED NOT NULL,
	user_id BIGINT UNSIGNED NOT NULL,
	filename varchar(8555),
	size int,
	metadata JSON,
	created_at datetime default now(),
	updated_at datetime on update current_timestamp,
	
	foreign key (user_id) references users(id),
	foreign key (video_type_id) references video_types(id)
);

DROP TABLE IF EXISTS film_albums;
CREATE TABLE film_albums (
	id SERIAL,
	name varchar(8555),
	user_id BIGINT UNSIGNED NOT NULL,
	
	foreign key (user_id) references users(id),
	primary key (id)
);

DROP TABLE IF EXISTS films;
CREATE TABLE films (
	id SERIAL,
	film_album_id BIGINT UNSIGNED NOT NULL,
	user_id BIGINT UNSIGNED NOT NULL,
	filename varchar(8555),
	size int,
	metadata JSON,
	created_at datetime default now(),
	updated_at datetime on update current_timestamp,
	
	foreign key (user_id) references users(id),
	foreign key (film_album_id) references film_albums(id)
);